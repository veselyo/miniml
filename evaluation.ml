(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
	   
    (* the type of values (including closures) stored in
       environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value =
      Closure (exp, env)

    let lookup (env : env) (varname : varid) : value =
      try 
        !(List.assoc varname env)
      with
      | _ -> raise (EvalError 
                   ("Lookup - " ^ varname ^
                   ": variable is not in the environment")) 

    let extend (env : env) (varname : varid) (loc : value ref) : env =
      (varname, loc) :: (List.remove_assoc varname env)

    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val exp -> exp_to_concrete_string exp
      | Closure (exp, env) -> if printenvp then exp_to_concrete_string exp ^
                              " where " ^ env_to_string env
                              else exp_to_concrete_string exp

    and env_to_string (env : env) : string =
      let rec env_to_string_helper (env : env) : string =
        match env with
        | [] -> ""
        | (varname, value) :: [] -> varname ^ " -> " ^ value_to_string !value
        | (varname, value) :: t -> varname ^ " -> " ^ value_to_string !value ^
                                   ", " ^ env_to_string_helper t
      in "{" ^ (env_to_string_helper env) ^ "}"
  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)

(* helper functions to evaluate unop and binop expressions based on the
   operator *)
let eval_unop (op : unop) (e : expr) : expr =
  match op, e with
  | Negate, Num n -> Num (~-n)
  | Negate, _ -> raise (EvalError "Negate: argument is not numerical") ;;


let eval_binop (op : binop) (e1 : expr) (e2 : expr) : expr =
  match op, e1, e2 with
  | Plus, Num n1, Num n2 -> Num (n1 + n2)
  | Minus, Num n1, Num n2 -> Num (n1 - n2)
  | Times, Num n1, Num n2 -> Num (n1 * n2)
  | Equals, Num n1, Num n2 -> Bool (n1 = n2)
  | Equals, Bool b1, Bool b2 -> Bool (b1 = b2)
  | LessThan, Num n1, Num n2 -> Bool (n1 < n2)
  | LessThan, Bool b1, Bool b2 -> Bool (b1 < b2)
  | Plus, _, _ -> raise (EvalError "Plus: arguments are not numerical")
  | Minus, _, _ -> raise (EvalError "Minus: arguments are not numerical")
  | Times, _, _ -> raise (EvalError "Times: arguments are not numerical")
  | Equals, _, _ -> raise (EvalError 
                          "Equals: arguments are not numerical/booleans")
  | LessThan, _, _ -> raise (EvalError 
                            "LessThan: arguments are not numerical/booleans") ;;

let eval_s (exp : expr) (_env : Env.env) : Env.value =
  let rec eval_helper (exp : expr) : expr = 
    match exp with
    | Var x -> raise (EvalError (x ^ ": variable is not bound"))
    | Unop (op, e) -> eval_unop op (eval_helper e)
    | Binop (op, e1, e2) -> eval_binop op (eval_helper e1) (eval_helper e2)
    | Conditional (cond, thn, els) -> 
        begin
          match eval_helper cond with
          | Bool b -> if b then eval_helper thn
                      else eval_helper els
          | _ -> raise (EvalError "Conditional: condition is not a boolean")
        end
    | Let (x, def, body) -> eval_helper (subst x (eval_helper def) body)
    | Letrec (x, def, body) -> 
        eval_helper (subst x (eval_helper 
                             (subst x (Letrec (x, (eval_helper def), Var (x)))
                             (eval_helper def))) body)
    | App (f, arg) ->
        begin 
          match eval_helper f with
          | Fun (x, e) -> eval_helper (subst x (eval_helper arg) e)
          | _ -> raise (EvalError 
                       "App: argument can only be applied to a function")
        end
    | Raise -> raise EvalException
    | _ -> exp
  in Env.Val (eval_helper exp) ;;
     
(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)

(* helper to extract expression from Env.value *)
let val_to_expr (value : Env.value) : expr =
  match value with
  | Env.Val e -> e
  | Env.Closure (e, _) -> e

let rec eval_d (exp : expr) (env : Env.env) : Env.value =
  let open Env in
  match exp with
  | Var x -> lookup env x
  | Unop (op, e) -> Val (eval_unop op (val_to_expr (eval_d e env)))
  | Binop (op, e1, e2) -> Val (eval_binop op (val_to_expr (eval_d e1 env))
                                             (val_to_expr (eval_d e2 env)))
  | Conditional (cond, thn, els) -> 
      begin
        match eval_d cond env with
        | Val (Bool b) -> if b then eval_d thn env
                          else eval_d els env
        | _ -> raise (EvalError "Conditional: condition is not a boolean")
      end
  | Let (x, def, body)
  | Letrec (x, def, body) -> let def_eval = eval_d def env in
                             eval_d body (extend env x (ref def_eval))
  | App (f, arg) ->
      begin 
        match eval_d f env with
        | Val (Fun (x, e)) -> let arg_eval = eval_d arg env in
                              eval_d e (extend env x (ref arg_eval))
        | _ -> raise (EvalError 
                      "App: argument can only be applied to a function")
      end
  | Raise -> raise EvalException
  | _ -> Val (exp)
     
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
let rec eval_l (exp : expr) (env : Env.env) : Env.value =
  let open Env in
  match exp with
  | Fun _ -> close exp env
  | Var x -> lookup env x
  | Unop (op, e) -> Val (eval_unop op (val_to_expr (eval_l e env)))
  | Binop (op, e1, e2) -> Val (eval_binop op (val_to_expr (eval_l e1 env))
                                             (val_to_expr (eval_l e2 env)))
  | Conditional (cond, thn, els) -> 
      begin
        match eval_l cond env with
        | Val (Bool b) -> if b then eval_l thn env
                          else eval_l els env
        | _ -> raise (EvalError "Conditional: condition is not a boolean")
      end
  | Let (x, def, body) -> let def_eval = eval_l def env in
                          eval_l body (extend env x (ref def_eval))
  | Letrec (x, def, body) ->  let unassigned = ref (Val Unassigned) in
                              let ext_env = extend env x unassigned in
                              let def_eval = eval_l def ext_env in
                              unassigned := def_eval;
                              eval_l body ext_env
  | App (f, arg) ->
      begin 
        match eval_l f env with
        | Closure (Fun(x, e), env_l) -> 
            let arg_eval = Val (val_to_expr (eval_l arg env)) in
            eval_l e (extend env_l x (ref arg_eval))
        | _ -> raise (EvalError 
                     "App: argument can only be applied to a function")
      end
  | Raise -> raise EvalException
  | _ -> Val (exp) ;;

(* combined eval_d and eval_l in one evaluator; we define type scope
   for dynamic and lexical, which needs to be pasted in the evaluator,
   so that it knows in which scope it should evaluate the expression *)
type scope = | Dyn
             | Lex

let rec eval_e (exp : expr) (env : Env.env) (scope : scope) : Env.value = 
  let open Env in
  match exp with
  | Fun _ -> if scope = Lex then close exp env else Val (exp)
  | Var x -> lookup env x
  | Unop (op, e) -> Val (eval_unop op (val_to_expr (eval_e e env scope)))
  | Binop (op, e1, e2) -> Val (eval_binop op (val_to_expr (eval_e e1 env scope))
                                             (val_to_expr (eval_e e2 env scope)))
  | Conditional (cond, thn, els) -> 
      begin
        match eval_e cond env scope with
        | Val (Bool b) -> if b then eval_e thn env scope
                          else eval_e els env scope
        | _ -> raise (EvalError "Conditional: condition is not a boolean")
      end
  | Let (x, def, body) -> let def_eval = eval_e def env scope in
                          eval_e body (extend env x (ref def_eval)) scope
  | Letrec (x, def, body) ->  if scope = Lex then
                                begin
                                  let unassigned = ref (Val Unassigned) in
                                  let ext_env = extend env x unassigned in
                                  let def_eval = eval_e def ext_env scope in
                                  unassigned := def_eval;
                                  eval_e body ext_env scope
                                end
                              else 
                                let def_eval = eval_e def env scope in
                                eval_e body (extend env x (ref def_eval)) scope
  | App (f, arg) ->
      if scope = Lex then
        begin 
          match eval_e f env scope with
          | Closure (Fun(x, e), env_l) -> 
              let arg_eval = Val (val_to_expr (eval_e arg env scope)) in
              eval_e e (extend env_l x (ref arg_eval)) scope
          | _ -> raise (EvalError 
                      "App: argument can only be applied to a function")
        end
      else
        begin 
          match eval_e f env scope with
          | Val (Fun (x, e)) -> let arg_eval = eval_e arg env scope in
                                eval_e e (extend env x (ref arg_eval)) scope
          | _ -> raise (EvalError 
                        "App: argument can only be applied to a function")
        end
  | Raise -> raise EvalException
  | _ -> Val (exp) ;;